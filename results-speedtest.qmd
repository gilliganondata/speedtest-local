---
title: "Speed Test Results"
format: html
editor: visual
execute: 
  echo: false
  warning: false
  message: false
---

```{r setup}

# Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
               scales,          # Quick and easy number formatting - %s in cells
               zoo,             # For rollmean() - rolling average
               lubridate,       # Work with dates
               gt)

# Get data
df_results <- read_csv("speedtest_log.csv") |> 
  mutate(start_time = ymd_hms(start_time))

# Make nicer metric names
df_names <- tibble(orig_name = c("download_mbps",
                                 "download_latency_iqm_ms",
                                 "download_latency_jitter_ms",
                                 "upload_mbps",
                                 "upload_latency_iqm_ms",
                                 "upload_latency_jitter_ms"),
                   clean_name = c("Download Bandwidth (Mbps)",
                                 "Download Latency IQM (ms)",
                                 "Download Latency Jitter (ms)",
                                 "Upload Bandwidth (Mbps)",
                                 "Upload Latency IQM (ms)",
                                 "Upload Latency Jitter (ms)"))

# Make it long format and add the nicer names
df_results_long <- df_results |> 
  pivot_longer(cols = -c(start_time, timestamp_utc, timestamp_local_tz, local_tz, result.url),
               names_to = "metric",
               values_to = "value") |> 
  left_join(df_names, by = c(metric = "orig_name"))

# Make a df that has any hours that do NOT have 4 entries. This is a check to be able
# to confirm that the script ran every 15 minutes. 
df_incomplete <- df_results |> 
  mutate(hour = round_date(start_time, "hour")) |> 
  group_by(hour) |> summarize(num = n()) |> 
  filter(num != 4) |> 
  arrange(hour) 


```

All captured metrics:

```{r results}
#| fig-height: 12

# Show all results with facets
gg <- ggplot(df_results_long, aes(x = start_time, y = value)) +
  geom_bar(stat="identity", fill = "#00035B") +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x)*1.08)) +
  facet_wrap(vars(clean_name), ncol = 1, scales="free_y", strip.position="top",
             axes = "all_x") +
  theme_minimal() +
  theme(strip.text.x.top = element_text(size = 14, face = "bold"),
        axis.title = element_blank(),
        axis.line.x = element_line(color = "gray20", size=0.5),
        axis.text.y = element_text(size = 10))

gg
```

Download and Upload Bandwidth:

```{r}

df_results_mbps <- df_results_long |> 
  filter(grepl(".*Bandwidth.*", clean_name))

gg <- ggplot(df_results_mbps, aes(x = start_time, y = value)) +
  geom_line(color = "#00035B", size = 0.8) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x)*1.08)) +
  facet_wrap(vars(clean_name), ncol = 1, scales="free_y", strip.position="top",
             axes = "all_x") +
  theme_minimal() +
  theme(strip.text.x.top = element_text(size = 12, face = "bold"),
        panel.spacing.y = unit(0.5, "cm"),
        axis.title = element_blank(),
        axis.line.x = element_line(color = "gray20", size=0.5),
        axis.text.y = element_text(size = 10))

gg


```
Download and Upload Bandwidth - 4-Part Rolling Average:

```{r}

df_results_mbps <- df_results_mbps |> 
    # Rolling average
  group_by(metric) |> 
  mutate(rolling_avg = rollmean(value, k = 4, fill = NA, align = "right")) |> 
  ungroup()

gg <- ggplot(df_results_mbps, aes(x = start_time, y = rolling_avg)) +
  geom_line(color = "#00035B", size = 0.8) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x)*1.08)) +
  facet_wrap(vars(clean_name), ncol = 1, scales="free_y", strip.position="top",
             axes = "all_x") +
  theme_minimal() +
  theme(strip.text.x.top = element_text(size = 12, face = "bold"),
        panel.spacing.y = unit(0.5, "cm"),
        axis.title = element_blank(),
        axis.line.x = element_line(color = "gray20", size=0.5),
        axis.text.y = element_text(size = 10))

gg


```

Find the outtages

```{r}

df_outtages <- df_results_long |> 
  filter(is.na(value)) |> 
  group_by(start_time) |> 
  summarise() |> ungroup() |> 
  arrange(start_time) |> 
  mutate(time_diff = difftime(start_time, lag(start_time,1))) |> 
  # Figure out if it's the start, end, or during (NA) the outtage
  mutate(outtage_milestone = case_when(
    is.na(time_diff) ~ "start",
    time_diff > 25 ~ "start",
    lead(time_diff, 1) > 25 ~ "end",
    # The last row will be an end
    is.na(lead(time_diff, 1)) ~ "end",
    TRUE ~ NA
  )) |> 
  # Get just the start and end dates
  filter(!is.na(outtage_milestone)) |> 
  # Add the end date and duration outtage to the "start" row
  mutate(outtage_end = if_else(outtage_milestone == "start", lead(start_time, 1), NA)) |> 
  filter(outtage_milestone == "start") |> 
  mutate(outtage_duration = round(difftime(outtage_end, start_time),2)) |> 
  mutate(start_time = format(start_time, "%d-%b-%Y %I:%M %p"),
         outtage_end = format(outtage_end, "%d-%b-%Y %I:%M %p"),
         outtage_duration = format(outtage_duration, nsmall = 2)) |> 
  select(first_detected = start_time,
         last_detected = outtage_end,
         outtage_duration)

gt(df_outtages) |> 
  cols_label(
    first_detected = "First Detected",
    last_detected = "Last Detected",
    outtage_duration = "Outtage Duration"
  ) |> 
  tab_options(
    table.align = "left"  # Left-justify entire table
  ) |> 
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_column_labels()
  )

```

